//----------------------------------------------------------
// This function is the only function that's called.
// This strategy gives us better control of the page.
//----------------------------------------------------------
function doAll() {
    firebase.auth().onAuthStateChanged(user => {
        if (user) {
            getNameFromAuth(user);
            getFavourites(user)
        } else {
            console.log("No user is signed in");
        }
    });
}
doAll();

//----------------------------------------------------------
// Wouldn't it be nice to see the User's Name on this page?
// Let's do it!  (Thinking ahead:  This function can be carved out, 
// and put into script.js for other pages to use as well).
//----------------------------------------------------------//----------------------------------------------------------
// function insertNameFromFirestore(user) {
//             db.collection("users").doc(user.uid).get().then(userDoc => {
//                 console.log(userDoc.data().name)
//                 userName = userDoc.data().name;
//                 console.log(userName)
//                 document.getElementById("name-goes-here").innerHTML = userName;
//             })

// }

function getNameFromAuth() {
    auth.onAuthStateChanged(user => {
        if (user) {
            var userName = user.displayName;
            document.getElementById("name-goes-here").innerText = userName;
        } else {
            console.log('No user is signed in.');
        }
    });
  }
  getNameFromAuth();

//----------------------------------------------------------
// This function takes input param User's Firestore document pointer
// and retrieves the "saved" array (of bookmarks) 
// and dynamically displays them in the gallery
//----------------------------------------------------------
function getFavourites(user) {
    db.collection("users").doc(user.uid).get()
        .then(userDoc => {

					  // Get the Array of bookmarks
            var favourites = userDoc.data().favourites;
            console.log(favourites);
						
						// Get pointer the new card template
            let newcardTemplate = document.getElementById("savedCardTemplate");

						// Iterate through the ARRAY of favourited lots (document ID's)
            favourites.forEach(thisLotID => {
                console.log(thisLotID);
                db.collection("lots").doc(thisLotID).get().then(doc => {
                    var title = doc.data().name; // get value of the "name" key
                    var lotCode = doc.data().code; //get unique ID to each lot to be used for fetching right image
                    var lotStatus = doc.data().status; //gets the status field
                    var lastupdated = doc.data().last_updated; // get value of the "details" key
                    var details = doc.data().details; // get value of the "details" key
                    var docID = doc.id;  //this is the autogenerated ID of the document
                    
                    //clone the new card
                    let newcard = newcardTemplate.content.cloneNode(true);

                    //update title and some pertinant information
                    newcard.querySelector('.card-title').innerHTML = title;
                    newcard.querySelector('.card-status').innerHTML = lotStatus;
                    newcard.querySelector(".card-lastupdate").innerHTML = lastupdated.toDate();
                    newcard.querySelector(".card-text").innerHTML = details;
                    newcard.querySelector('.card-image').src = `./images/${lotCode}.png`;
                    newcard.querySelector('a').href = "lotdetail.html?docID=" + docID;

                    // //NEW LINE: update to display length, duration, last updated
                    // newcard.querySelector('.card-length').innerHTML =
                    //     "Length: " + doc.data().length + " km <br>" +
                    //     "Duration: " + doc.data().lot_time + "min <br>" +
                    //     "Last updated: " + doc.data().last_updated.toDate().toLocaleDateString();

										//Finally, attach this new card to the gallery
                    lotCardGroup.appendChild(newcard);
                })
            });
        })
}